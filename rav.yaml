scripts:
  # Server and Django commands
  server: |
    cd "$(pwd)" && python manage.py runserver
  migrate: |
    cd "$(pwd)" && python manage.py migrate
  freeze: |
    venv/Scripts/python -m pip freeze > requirements.txt

  # Tailwind CSS watch command
  watch: |
    npx tailwindcss -i ./static/tailwind/tailwind-input.css -o ./static/css/output.css --watch

  # Installation commands for both Windows and Unix systems
  installs:
    - ./venv/Scripts/pip-compile ecommerce_app/requirements/requirements.in -o ecommerce_app/requirements.txt
    - ./venv/Scripts/python -m pip install -r ecommerce_app/requirements.txt
    - npm install

  win_installs:
    - pip-compile ecommerce_app/requirements/requirements.in -o ecommerce_app/requirements.txt
    - python -m pip install -r ecommerce_app/requirements.txt
    - npm install

  # Vendor pull commands
  vendor_pull:
    - rm -rf ecommerce_app/static/vendor
    - mkdir -p ecommerce_app/static/vendor/htmx/
    - mkdir -p ecommerce_app/static/vendor/flowbite/
    - curl -L https://unpkg.com/htmx.org@1.8.2 -o ./ecommerce_app/static/vendor/htmx/htmx.min.js
    - cp ./node_modules/flowbite/dist/flowbite.min.js ./ecommerce_app/static/vendor/flowbite/flowbite.min.js

  # Docker commands
  build: |
    docker build -f Dockerfile -t micro-ecommerce .

  docker_dev: |
    docker run --env-file .env-dev -p 8001:8000 --rm --name micro-ecommerce-dev -it micro-ecommerce

  docker_prod: |
    docker run --env-file .env-prod -p 8002:8000 --rm --name micro-ecommerce-prod -it micro-ecommerce

  build_push:
    - docker build --platform=linux/amd64 -f Dockerfile -t codingforentrepreneurs/micro-ecommerce .
    - docker push codingforentrepreneurs/micro-ecommerce --all-tags
